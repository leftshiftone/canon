import groovy.util.Node
import org.gradle.api.JavaVersion
import org.gradle.api.credentials.AwsCredentials
import org.gradle.api.publish.maven.MavenPublication
import org.gradle.api.tasks.bundling.Jar

/*
 * Copyright (c) 2016-2019, Leftshift One
 * __________________
 * [2019] Leftshift One
 * All Rights Reserved.
 * NOTICE:  All information contained herein is, and remains
 * the property of Leftshift One and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Leftshift One
 * and its suppliers and may be covered by Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Leftshift One.
 */

buildscript {
    ext {
        kotlinVersion = "1.3.41"
        mockkVersion = "1.9.3"
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
        classpath "com.netflix.nebula:nebula-release-plugin:8.0.3"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
    }
}

repositories {
    jcenter()
    mavenCentral()
}

apply plugin: "antlr"
apply plugin: "kotlin"
apply plugin: "nebula.nebula-release"
apply plugin: "org.jetbrains.dokka"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"
apply plugin: "org.sonarqube"


compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=compatibility"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=compatibility"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    antlr "org.antlr:antlr4:4.7.2"

    compile "org.antlr:antlr4-runtime:4.7.2"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.apache.commons:commons-lang3:3.0"
    compile "commons-codec:commons-codec:1.5"
    compile  "org.slf4j:slf4j-api:1.7.30"

    testCompile "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testCompile "org.assertj:assertj-core:3.11.1"
    testCompile "io.mockk:mockk:$mockkVersion"
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile group: 'org.apache.velocity', name: 'velocity', version: '1.7'
}

release {
    defaultVersionStrategy = nebula.plugin.release.NetflixOssStrategies.SNAPSHOT
}

test {
    useJUnitPlatform()
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "${buildDir}/dokkaJavadoc"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

task javadocJar(type: Jar) {
    from dokkaJavadoc
    classifier "javadoc"
}


tasks.withType(Test) { testTask ->
    minHeapSize = "1G"
    maxHeapSize = "2G"
    testTask.beforeTest { descriptor ->
        logger.lifecycle(descriptor.toString())
    }
    testTask.afterTest { descriptor, result ->
        println "\n$descriptor.className [$descriptor.classDisplayName] > $descriptor.name [$descriptor.displayName]: $result.resultType"
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/config.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project.name
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                Node root = asNode()
                root.appendNode("name", "Canon")
                root.appendNode("description", "Canon.")
                root.appendNode("url", "https://github.com/leftshiftone/Canon")

                Node licenses = root.appendNode("licenses")
                Node license = licenses.appendNode("license")
                license.appendNode("name", "The Apache License, Version 2.0")
                license.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")

                Node developers = root.appendNode("developers")
                Node developer = developers.appendNode("developer")
                developer.appendNode("id", "leftshiftone")
                developer.appendNode("name", "Leftshift One")
                developer.appendNode("email", "contact@leftshift.one")
                developer.appendNode("organization", "Leftshift One Software GmbH")
                developer.appendNode("organizationUrl", "https://www.leftshift.one")

                Node scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/canon.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/canon.git")
                scm.appendNode("url", "https://github.com/leftshiftone/canon")
            }
        }
    }
}

bintray {
    logger.info "Bintray deploy with user [${System.getenv('BINTRAY_USER')}] while working on ${project.name}"
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publish = true
    pkg {
        repo = "canon"
        name = "${project.group}.${project.name}"
        userOrg = "leftshiftone"
        licenses = ["Apache-2.0"]
        vcsUrl = "https://github.com/leftshiftone/canon.git"
        publications = ["mavenJava"]
    }
}

generateGrammarSource {
    outputDirectory = new File(project.buildDir, "generated-src/antlr/canon/antlr")
    arguments += ["-visitor", "-package", "canon.antlr"]
}

compileKotlin.dependsOn generateGrammarSource
build.dependsOn generateGrammarSource

compileTestKotlin.dependsOn generateTestGrammarSource

sourceSets.main.java.srcDirs += new File(buildDir, "generated-src/antlr")