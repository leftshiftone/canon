/*
 * Copyright (c) 2016-2019, Leftshift One
 * __________________
 * [2019] Leftshift One
 * All Rights Reserved.
 * NOTICE:  All information contained herein is, and remains
 * the property of Leftshift One and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Leftshift One
 * and its suppliers and may be covered by Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Leftshift One.
 */

buildscript {
    ext {
        kotlinVersion = "1.4.32"
        mockkVersion = "1.9.3"
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "one.leftshift.asteria:asteria-code-analytics:4.0.2"
        classpath "one.leftshift.asteria:asteria-dependency:4.0.2"
        classpath "one.leftshift.asteria:asteria-email:4.0.2"
        classpath "one.leftshift.asteria:asteria-publish:4.0.2"
        classpath "one.leftshift.asteria:asteria-report:4.0.2"
        classpath "one.leftshift.asteria:asteria-version:4.0.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

apply plugin: "antlr"
apply plugin: "kotlin"
apply plugin: "org.jetbrains.dokka"
apply plugin: "maven-publish"
apply plugin: "signing"
apply plugin: "io.codearte.nexus-staging"

apply plugin: "one.leftshift.asteria-email"
apply plugin: "one.leftshift.asteria-report"
apply plugin: "one.leftshift.asteria-code-analytics"
apply plugin: "one.leftshift.asteria-dependency"
apply plugin: "one.leftshift.asteria-publish"
apply plugin: "one.leftshift.asteria-version"

nexusStaging {
    packageGroup = "one.leftshift"
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    stagingProfileId = System.getenv("OSSRH_STAGING_PROFILE_ID")
    username = System.getenv("OSSRH_LOGIN_NAME")
    password = System.getenv("OSSRH_LOGIN_PASSWORD")
}

asteriaEmail {
    smtpHost = System.getenv("ASTERIA_EMAIL_SMTP_HOST")
    if (System.getenv("ASTERIA_EMAIL_SMTP_PORT")) {
        smtpPort = System.getenv("ASTERIA_EMAIL_SMTP_PORT").toInteger()
    }
    smptUser = System.getenv("ASTERIA_EMAIL_SMTP_USER")
    smptPassword = System.getenv("ASTERIA_EMAIL_SMTP_PASSWORD")
    sender = System.getenv("ASTERIA_EMAIL_SENDER")
}

asteriaReport {
    reportingUrl = System.getenv("ASTERIA_REPORT_URL")
    depsJsonResult = file("${rootProject.buildDir}/dependencyUpdates/report.json")
    junitXmlResults = fileTree(rootProject.projectDir) {
        include("**/test-results/*/TEST-*.xml")
    }
    junitBinaryResults = files(["test"].collect {
        "${project.buildDir}/test-results/${it}/binary"
    })
}

asteriaDependency {
    dependencyManagementEnabled = false
    enableBranchSnapshotRepositories = true
}

asteriaCodeAnalytics {
    sonarUrl = System.getenv("SONAR_HOST_URL")
    sonarLoginToken = System.getenv("SONAR_LOGIN")
    sonarProperties = ["sonar.test.inclusions": "**/*Test*/**"]
    xmlCoverageReportEnabled = true
    coverageExcludes = ["**/canon/api/**"]
}

repositories {
    jcenter()
    mavenCentral()
}

afterEvaluate { project.tasks.sendReleaseEmail.mustRunAfter project.tasks.postRelease }

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=compatibility"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=compatibility"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.4.2'
    antlr "org.antlr:antlr4:4.7.2"

    compile "org.antlr:antlr4-runtime:4.7.2"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.apache.commons:commons-lang3:3.0"
    compile "commons-codec:commons-codec:1.5"
    compile "org.slf4j:slf4j-api:1.7.30"

    testCompile "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testCompile "org.assertj:assertj-core:3.11.1"
    testCompile "io.mockk:mockk:$mockkVersion"
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile group: 'org.apache.velocity', name: 'velocity', version: '1.7'

    //see: XSLTUpgradeHandlerTest
    testRuntimeOnly('xalan:xalan:2.7.2')

}
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "org.jetbrains.kotlin") {
            details.useVersion kotlinVersion
        }
    }
}

test {
    useJUnitPlatform()
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "${buildDir}/dokkaJavadoc"
}

task javadocJar(type: Jar) {
    from dokkaJavadoc
    classifier "javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}
artifacts {
    archives javadocJar, sourcesJar
}

tasks.withType(Test) { testTask ->
    minHeapSize = "1G"
    maxHeapSize = "2G"
    testTask.beforeTest { descriptor ->
        logger.lifecycle(descriptor.toString())
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/config.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

asteriaPublish {
    enableBranchSnapshotRepositories = true
}
publishing {
    publications {
        release(MavenPublication) {
            artifactId = project.name
            from components.java
            artifact sourceJar
            artifact javadocJar
            pom.withXml {
                Node root = asNode()
                root.appendNode("name", "Canon")
                root.appendNode("description", "Canon.")
                root.appendNode("url", "https://github.com/leftshiftone/Canon")

                Node licenses = root.appendNode("licenses")
                Node license = licenses.appendNode("license")
                license.appendNode("name", "The Apache License, Version 2.0")
                license.appendNode("url", "http://www.apache.org/licenses/LICENSE-2.0.txt")

                Node developers = root.appendNode("developers")
                Node developer = developers.appendNode("developer")
                developer.appendNode("id", "leftshiftone")
                developer.appendNode("name", "Leftshift One")
                developer.appendNode("email", "contact@leftshift.one")
                developer.appendNode("organization", "Leftshift One Software GmbH")
                developer.appendNode("organizationUrl", "https://www.leftshift.one")

                Node scm = root.appendNode("scm")
                scm.appendNode("connection", "scm:git:git://github.com/leftshiftone/canon.git")
                scm.appendNode("developerConnection", "scm:git:ssh://github.com:leftshiftone/canon.git")
                scm.appendNode("url", "https://github.com/leftshiftone/canon")
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.toString().endsWith("SNAPSHOT") ? "https://s01.oss.sonatype.org/content/repositories/snapshots" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username System.getenv("OSSRH_LOGIN_NAME")
                password System.getenv("OSSRH_LOGIN_PASSWORD")
            }
        }
    }
}

ext."signing.keyId" = System.getenv("OSSRH_SIGN_KEY_ID")
ext."signing.password" = System.getenv("OSSRH_SIGN_KEY_PASSWORD")
ext."signing.secretKeyRingFile" = System.getenv("OSSRH_SIGN_KEY_PATH")
signing {
    sign publishing.publications
}

generateGrammarSource {
    outputDirectory = new File(project.buildDir, "generated-src/antlr/canon/antlr")
    arguments += ["-visitor", "-package", "canon.antlr"]
}

compileKotlin.dependsOn generateGrammarSource
build.dependsOn generateGrammarSource

compileTestKotlin.dependsOn generateTestGrammarSource

sourceSets.main.java.srcDirs += new File(buildDir, "generated-src/antlr")
